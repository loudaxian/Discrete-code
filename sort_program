//第一次写排序算法
#include <iostream>

using namespace std;

void swap_array(int arraynum[],int i,int j)//交换函数
{
    int tmp=arraynum[i];
    arraynum[i]=arraynum[j];
    arraynum[j]=tmp;
}

void InsertSort(int arraynum[],int n)//插入排序
{
    for(int i=0;i<n;i++)
    {
        for(int j=i;j>0;j--)
        {
            if(arraynum[j]<arraynum[j-1])
                swap_array(arraynum,j,j-1);
            else
                break;
        }
    }
}

void BubbleSort(int arraynum[],int n)//冒泡排序
{
    for(int i=0;i<n-1;i++)
    {
        for(int j=n-1;j>i;j--)
        {
            if(arraynum[j]<arraynum[j-1])
                swap_array(arraynum,j,j-1);
        }
    }
}

void ShellSort(int arraynum[],int n)//希尔排序
{
    for(int Delta=n/2;Delta>0;Delta/=2)
    {
        for(int i=0;i<Delta;i++)
        {
            for(int j=Delta+i;j<n;j+=Delta)
            {
                for(int k=j;k>0;k-=Delta)
                {
                    if(arraynum[k]<arraynum[k-1])
                        swap_array(arraynum,k,k-1);
                }
            }
        }
    }
}

void quickSort(int arraynum[],int left,int right)
{
    if(left>right)
        return;
    int first=left;
    int last=right;
    int key=arraynum[first];
    while(first<last)
    {
        while(first<last&&arraynum[last]>=key)
            --last;
        arraynum[first]=arraynum[last];
        while(first<last&&arraynum[first]<=key)
            ++first;
        arraynum[last]=arraynum[first];
    }
    arraynum[first]=key;
    quickSort(arraynum,left,first-1);
    quickSort(arraynum,first+1,right);
}

void QuickSort(int arraynum[],int n)//快速排序
{
    quickSort(arraynum,0,n);
}

void Merge(int source[],int temp[],int start,int mid,int endi)
{
    int i=start,j=mid,k=start;
    while(i!=mid+1&&j!=endi+1)
    {
        if(source[i]>source[j])
            temp[k++]=source[j++];
        else
            temp[k++]=source[i++];
    }
    while(i!=mid+1)
    {
        temp[k++]=source[i++];
    }
    while(j!=mid+1)
        temp[k++]=source[j++];
    for(i=start;i<=endi;i++)
        source[i]=temp[i];
}
void mergesort(int arraynum[],int temp[],int start,int endin)
{
     int mid;
     if(start<endin)
     {
         mid=(start+endin)/2;
         mergesort(arraynum,temp,start,mid);
         mergesort(arraynum,temp,mid+1,endin);
         Merge(arraynum,temp,start,mid,endin);
     }
}
void MergeSort(int arraynum[],int n)//归并排序
{
    int b[n];
    mergesort(arraynum,b,0,n-1);
}


int main()
{
    int arraynum[9]={2,34,12,98,6,45,29,38,23};
    MergeSort(arraynum,9);
    for(int i=0;i<9;i++)
        cout<<arraynum[i]<<" ";
    cout<<endl;
    return 0;
}
